generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  userId            String              @id
  email             String?             @unique
  name              String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userApiLimit      UserApiLimit?
  contacts          Contact[]           @relation("UserToContact")
  task              GmailImportTask?
  mailingLists      MailingList[]       @relation("UserToMailingList")
  smsLists          SMSList[]           @relation("UserToSMSList")
  messageTemplates  MessageTemplate[]   @relation("UserToMessageTemplate")
  scheduledMessages ScheduledMessages[] @relation("UserToScheduledMessages")
}

model UserApiLimit {
  id        String   @id @default(cuid())
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  email     Int      @default(0)
  text      Int      @default(0)
  user      User     @relation(fields: [userId], references: [userId])
}

model GmailImportTask {
  id                String     @id @default(cuid())
  status            TaskStatus
  result            String?
  lastProcessedDate DateTime?
  nextPageToken     String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  user              User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId            String     @unique
}

model Contact {
  id                   String                 @id @default(cuid())
  userId               String
  email                String?
  source               String?
  name                 String?
  primaryAddress       String?
  secondaryAddress     String?
  primaryPhone         String?
  secondaryPhone       String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  user                 User                   @relation("UserToContact", fields: [userId], references: [userId], onDelete: Cascade)
  ContactOnMailingList ContactOnMailingList[]
  ContactOnSMSList     ContactOnSMSList[]

  @@index([userId])
}

model MailingList {
  id       Int                    @id @default(autoincrement())
  name     String
  userId   String
  user     User                   @relation("UserToMailingList", fields: [userId], references: [userId])
  contacts ContactOnMailingList[]
}

model SMSList {
  id       Int                @id @default(autoincrement())
  name     String
  userId   String
  user     User               @relation("UserToSMSList", fields: [userId], references: [userId])
  contacts ContactOnSMSList[]
}

model MessageTemplate {
  id                Int                 @id @default(autoincrement())
  name              String
  content           String // Save the wysiwyg editor content here
  type              MessageType
  userId            String
  user              User                @relation("UserToMessageTemplate", fields: [userId], references: [userId])
  ScheduledMessages ScheduledMessages[]
}

enum MessageType {
  EMAIL
  SMS
}

model ContactOnMailingList {
  contactId     String
  mailingListId Int
  contact       Contact     @relation(fields: [contactId], references: [id])
  mailingList   MailingList @relation(fields: [mailingListId], references: [id])

  @@id([contactId, mailingListId])
}

model ContactOnSMSList {
  contactId String
  smsListId Int
  contact   Contact @relation(fields: [contactId], references: [id])
  smsList   SMSList @relation(fields: [smsListId], references: [id])

  @@id([contactId, smsListId])
}

model ScheduledMessages {
  id         Int             @id @default(autoincrement())
  cronTime   String // Use cron format to specify when to send the message
  type       MessageType
  userId     String
  user       User            @relation("UserToScheduledMessages", fields: [userId], references: [userId])
  templateId Int
  template   MessageTemplate @relation(fields: [templateId], references: [id])
}

enum TaskStatus {
  PENDING
  COMPLETED
  ERROR
}
